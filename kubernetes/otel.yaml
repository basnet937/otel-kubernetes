---
apiVersion: v1
kind: ConfigMap
metadata:
  name: collector-config
data:
  collector.yaml: |
    receivers:
      otlp:
        protocols: 
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
    processors:
    exporters:
      logging:
      prometheus:
        endpoint: 127.0.0.1:8889
        namespace: default
    extensions:
      health_check:        
    service:
      extensions: [health_check]
      pipelines:
        traces:
          receivers: [otlp]
          processors: []
          exporters: [logging]
        metrics:
          receivers: [otlp]
          processors: []
          exporters: [prometheus]
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: otel-collector-daemonset
  labels:
    app: otel-collector
spec:
  selector:
    matchLabels:
      name: otel-collector
  template:
    metadata:
      labels:
        name: otel-collector
    spec:
      tolerations:
      # these tolerations are to have the daemonset runnable on control plane nodes
      # remove them if your control plane nodes should not run pods
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      containers:
      - name: otel-collector
        image: otel/opentelemetry-collector:0.88.0
        args:
        - --config=/conf/collector.yaml
        ports:
        - containerPort: 4317   # otlp grpc
        - containerPort: 13133  # health check
        env:
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP             
        volumeMounts:
        - mountPath: /conf
          name: collector-config                
        # resources:
        #   limits:
        #     memory: 200Mi
        #   requests:
        #     cpu: 100m
        #     memory: 200Mi
      volumes:
      - configMap:
          items:
          - key: collector.yaml
            path: collector.yaml
          name: collector-config
        name: collector-config

      # it may be desirable to set a high priority class to ensure that a DaemonSet Pod
      # preempts running Pods
      # priorityClassName: important
      terminationGracePeriodSeconds: 30 # allows graceful termination
      # volumes:
      # - name: varlog
      #   hostPath:
      #     path: /var/log


---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector-service
spec:
  type: NodePort
  selector:
    app: otel-collector
  ports:
    - name: grpc
      protocol: TCP
      port: 4317
      targetPort: 4317
      nodePort: 32317
    - name: healthcheck
      protocol: TCP
      port: 13133
      targetPort: 13133
      nodePort: 32133
